domain invoice;
Enum Sex{
    Male,Female
}
Reference Customer{
    String id;
    String name;
    int age;
    Sex sex;
}

Reference Product{
    String id;
    String name;
}

Entity BaseAccount{
    String id;
    double balance;
    double max;
    double min;
}
Reference Stock{
    String id;
    int quantity;
    int max;
    int min;
}

Role Goods{
    String goodsId;
    GoodsStock stock;
    double price;
}
Role GoodsStock{}
Role Account{}
take BaseAccount as Account{takeall;}
take Stock as GoodsStock{takeall;}
take Product as Goods{
    mapsame;
    String goodsId = id;
    takeall;
}
Role Amount{
    int quantity;
    double amount;
    date signDate;
}
Contract Invoice{
    String id;
    Account buyer;
    Account seller;
    Goods goods;
    Amount amount;
}



atomic query queryAccount(Account account);
atomic calculate calculateAmount(Goods goods, Amount amount);
atomic update decAccount(Account account, Amount amount);
atomic update incAccount(Account account, Amount amount);
atomic update decStock(GoodsStock stock, Amount amount);
atomic check checkStock(GoodsStock stock);

Scenario parallel makeInvoice(Invoice invoice){
    queryAccount(invoice.buyer);
    queryAccount(invoice.seller);
    serial{
        checkStock(invoice.goods.stock);
        calculateAmount(invoice.goods, invoice.amount);
    }
    transaction{
        decAccount(invoice.buyer, invoice.amount);
        incAccount(invoice.seller, invoice.amount);
        decStock(invoice.goods.stock, invoice.amount);
    }
}